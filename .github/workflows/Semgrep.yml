name: Semgrep
on:
  pull_request: {}
jobs:
  semgrep:
    # User-definable name of this GitHub Actions job:
    name: Scan
    # If you are self-hosting, change the following `runs-on` value: 
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep
    steps:
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - name: Run SAST scan using Semgrep 
        run: semgrep ci --no-suppress-errors --text --output=semgrep.text
        continue-on-error: true
        env:
           # Add the rules that Semgrep uses by setting the SEMGREP_RULES environment variable. 
          # SEMGREP_RULES: p/default # more at semgrep.dev/explore
           SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }} 
      - name: Semgrep Security Gtaing
        continue-on-error: true
        run: |   
         Semgrepcount=$(curl -X GET --header 'Content-Type: application/json' --header 'Authorization: token ${{ secrets.SEMGREP_APP_TOKEN }}' 'https://semgrep.dev/api/v1/PR/pr/findings')
         HIGH=$(echo "$Semgrepcount" | jq .issueCountsBySeverity.high )
         MEDIUM=$(echo "$Semgrepcount" | jq .issueCountsBySeverity.medium )
         LOW=$(echo "$Semgrepcount" | jq .issueCountsBySeverity.low )
         echo "HIGH = $HIGH"
         echo "MEDIUM = $MEDIUM"
         echo "LOW = $LOW"
         if [ $HIGH -gt 0 ]
         then
           curl -H 'Content-Type: application/json' -d '{"text": "<Application Name> has HIGH Issues in Semgrep"}'         
           echo "##[error]Application has HIGH issues"
           #exit 1
         elif [ $MEDIUM -gt 0 ]
         then
           curl -H 'Content-Type: application/json' -d '{"text": "<Application Name> has MEDIUM Issues in Semgrep"}'         
           echo "##[error]Application has MEDIUM issues"
           #exit 1
         else
          echo "PASSED"
         fi
